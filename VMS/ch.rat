#-h-  ch.r                       3490  local   12/10/80  15:14:16
 define(NEXPR,10)   # max nbr expressions allowed on command line
 #        include ratdef
 DRIVER(change)
 ## change - change 'string1'  into  'string2'
    character lin(MAXLINE), new(MAXLINE), pat(MAXPAT,NEXPR)
    character arg(MAXARG), from(MAXPAT), to(MAXPAT)
    integer addset, amatch, getarg, getlin, getpat, getsub
    integer i, junk, k, lastm, m , index
    integer except, andpat, narg, frarg, toarg, npat, itoc, status
    integer gmatch, tagbeg (10), tagend (10)
    external index
    string illpat "illegal pattern: "
    string maxexp "max nbr expressions allowed: "

 except = NO
 andpat = NO
 narg = 0
 call query("usage:  ch [-ax] [expressions] from [to].")
 for (i=1; getarg(i, arg, MAXARG) != EOF; i=i+1)
    if (arg(1) == MINUS)
        {
        call scopy(arg, 1, lin, 1)
        call fold(lin)
        if (index(lin, LETA) > 0)
            andpat = YES
        if (index(lin, LETX) > 0)
            except = YES
        call delarg(i)
        i = i - 1
        }
    else
        narg = narg + 1
 if (narg == 0)
    call cherr
 else if (narg == 1 | narg == 2)
    {
    frarg = 1
    toarg = 2
    npat = 1
    }
 else
    {
    toarg = narg
    frarg = narg - 1
    npat = narg - 2
    }
 if (npat > NEXPR)
    {
    call putlin(maxexp, ERROUT)
    i = itoc(NEXPR, arg, MAXARG)
    call error(arg)
    }
 junk = getarg(frarg, arg, MAXARG)
 if (getpat(arg, from) == ERR)
    call error("illegal fromexpr pattern.")
 if (getarg(toarg, arg, MAXARG) == EOF)
    arg(1) = EOS
 if (getsub(arg, to) == ERR)
    call error("illegal toexpr.")
 for (i=1; i <= npat; i=i+1)
    {
    junk = getarg(i, arg, MAXARG)
    if (getpat(arg, pat(1,i)) == ERR)
        {
        call putlin(illpat, ERROUT)
        call error(arg)
        }
    }
 while (getlin(lin, STDIN) != EOF)
    {
    status = gmatch(lin, pat, npat, andpat)
    if ((status == YES & except == NO) | (status == NO & except == YES))
        {
       k = 1
       lastm = 0
       for ( i =1; lin(i) != EOS; ) {
          m = amatch(lin, i, from, tagbeg, tagend)
          if (m > 0 & lastm != m) {   # replace matched text
             call catsub(lin, tagbeg, tagend, to, new, k, MAXLINE)
             lastm = m
             }
          if (m == 0 | m == i) {   # no match or null match
             junk = addset(lin(i), new, k, MAXLINE)
             i = i + 1
             }
          else            # skip matched text
             i = m
          }
       if (addset(EOS, new, k, MAXLINE) == NO) {
          k = MAXLINE
          junk = addset(EOS, new, k, MAXLINE)
          call remark('line truncated:.')
          call putlin(new, ERROUT)
          call putch(NEWLINE, ERROUT)
          }
       call putlin(new, STDOUT)
       }
    else
        call putlin(lin, STDOUT)
    }
 DRETURN
    end
 subroutine cherr

 call error("usage:  ch [-ax] [expressions] from [to].")

 return
 end
 ## getsub - get substitution pattern into sub
    integer function getsub(arg, sub)
    character arg(MAXARG), sub(MAXPAT)
    integer maksub

    getsub = maksub(arg, 1, EOS, sub)
    return
    end
 integer function gmatch(lin, pat, elevel, andpat)

 integer elevel, andpat, match, i, status
 character lin(ARB), pat(MAXPAT, NEXPR)

 gmatch = andpat
 for (i=1; i <= elevel; i=i+1)
    {
    status = match(lin, pat(1,i))
    if (andpat == NO & status == YES)
        {
        gmatch = YES
        break
        }
    else if (andpat == YES & status == NO)
        {
        gmatch = NO
        break
        }
    }

 return
 end
#-t-  ch.r                       3490  local   12/10/80  15:14:16
