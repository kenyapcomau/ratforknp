define(ALPHA,97)
define(AMPER,38)
define(ARB,*)
define(ATSIGN,64)
define(BACKSLASH,92)
define(BAR,124)
define(BELL,7)
define(BLANK,32)
define(BYTE,INTEGER)
define(CARET,94)
define(char,byte)
define(COLON,58)
define(COMMA,44)
define(DASH,45)
define(DIG0,48)
define(DIG1,49)
define(DIG2,50)
define(DIG3,51)
define(DIG4,52)
define(DIG5,53)
define(DIG6,54)
define(DIG7,55)
define(DIG8,56)
define(DIG9,57)
define(DIGIT,48)
define(DOLLAR,36)
define(DQUOTE,34)
define(EOF,-1)
define(EOS,0)
define(EQUALS,61)
define(ERRSTATUS,-1)
define(ESCAPE,27)
define(EXCLAIM,33)
define(FOREVER,)
define(GREATER,62)
define(HASH,35)
define(int,integer)
define(LBRACE,123)
define(LBRACK,91)
define(LESS,60)
define(LETA,97)
define(LETB,98)
define(LETC,99)
define(LETD,100)
define(LETE,101)
define(LETF,102)
define(LETG,103)
define(LETH,104)
define(LETI,105)
define(LETJ,106)
define(LETK,107)
define(LETL,108)
define(LETM,109)
define(LETN,110)
define(LETO,111)
define(LETP,112)
define(LETQ,113)
define(LETR,114)
define(LETS,115)
define(LETT,116)
define(LETTER,97)
define(LETU,117)
define(LETV,118)
define(LETW,119)
define(LETX,120)
define(LETY,121)
define(LETZ,122)
define(LPAREN,40)
define(MAXCARD,80)
define(MAXLINE,81)
define(MINUS,45)
define(NEWLINE,10)
define(NEWPAGE,12)
define(NO,0)
define(NOT,94)
define(NULL,0)
define(PERCENT,37)
define(PERIOD,46)
define(PLUS,43)
define(QMARK,63)
define(RBRACE,125)
define(RBRACK,93)
define(RPAREN,41)
define(SEMICOL,59)
define(SHARP,35)
define(SLASH,47)
define(SPACE,32)
define(SQUOTE,39)
define(STAR,42)
define(STDERR,5)
define(STDIN,7)
define(STDOUT,6)
define(TAB,9)
define(TILDE,126)
define(UNDERLINE,95)
define(UPA,65)
define(UPB,66)
define(UPC,67)
define(UPD,68)
define(UPE,69)
define(UPF,70)
define(UPG,71)
define(UPH,72)
define(UPI,73)
define(UPJ,74)
define(UPK,75)
define(UPL,76)
define(UPM,77)
define(UPN,78)
define(UPO,79)
define(UPP,80)
define(UPQ,81)
define(UPR,82)
define(UPS,83)
define(UPT,84)
define(UPU,85)
define(UPV,86)
define(UPW,87)
define(UPX,88)
define(UPY,89)
define(UPZ,90)
define(YES,1)
define(BUFSIZ,100)
define(DEFTYPE,-4)
define(ESCTYPE,-3)
define(LEXBREAK,-8)
define(LEXDIGITS,-9)
define(LEXDO,-10)
define(LEXELSE,-11)
define(LEXEND,-20)
define(LEXFOR,-16)
define(LEXFUN,-19)
define(LEXIF,-12)
define(LEXINCL,-21)
define(LEXNEXT,-13)
define(LEXOTHER,-14)
define(LEXREPT,-17)
define(LEXRET,-22)
define(LEXSTRING,-23)
define(LEXUNTIL,-18)
define(LEXWHILE,-15)
define(MAXCHARS,6)
define(MAXDEF,80)
define(MAXFN,9)
define(MAXFNAME,20)
define(MAXFOR,100)
define(MAXIDL,8)
define(MAXINCL,5)
define(MAXNAM,20)
define(MAXPTR,199)
define(MAXSTACK,50)
define(MAXSTR,80)
define(MAXTBL,2000)
define(MAXTOK,80)
define(PRIMOUT,6)

# ratfor - main program

call init
call parse
call fin
end

# alldig - return YES if str is all digits

int function alldig(str)
implicit none
char type
char str(ARB)
int i

alldig=NO
if(str(1)==EOS)
	return
for(i=1; str(i)!=EOS; i=i+1)
	if(type(str(i))!=DIGIT)
		return
alldig=YES
return
end

# assoc - get current file name for error messages

subroutine assoc
implicit none

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

inquire(ipt,name=cfname)
return
end

# balpar - copy balanced parenthesized string

subroutine balpar
implicit none
char deftok
char t,token(MAXTOK)
int nlpar

if(deftok(token,MAXTOK)!=LPAREN){
	call synerr('Missing left parenthesis.')
	return
	}
call outstr(token)
nlpar=1
repeat{
	t=deftok(token,MAXTOK)
	if(t==SEMICOL | t==LBRACE | t==RBRACE | t==EOF){
		call pbstr(token)
		break
		}
	if(t==NEWLINE)		# delete newlines
		token(1)=EOS
	call parcnt(t,nlpar)
	# else do nothing special
	call outstr(token)
	}until(nlpar<=0)
if(nlpar!=0)
	call synerr('Missing parenthesis in condition.')
return
end

# brknxt - generate code for break and next

subroutine brknxt(sp,lextyp,labval,token)
implicit none
char lextyp(MAXSTACK),token
int labval(MAXSTACK),i,sp

for(i=sp; i>0; i=i-1)
	if(lextyp(i)==LEXWHILE | lextyp(i)==LEXFOR | lextyp(i)==LEXREPT
		| lextyp(i)==LEXDO){
	if(token==LEXBREAK)
		call outgo(labval(i)+1)
	else
		call outgo(labval(i))
	return
	}
if(token==LEXBREAK)
	call synerr('Illegal break.')
else
	call synerr('Illegal next.')
return
end

# deftok - get token; process macro calls

char function deftok(token,toksiz)
implicit none
char gettok
char token(MAXTOK),defn(MAXDEF),t
int lookup
int toksiz

#string sfun "function"
#string send "end"

char sfun(9),send(4)
data sfun/LETF,LETU,LETN,LETC,LETT,LETI,LETO,LETN,EOS/
data send/LETE,LETN,LETD,EOS/

for(t=gettok(token,toksiz); t!=EOF; t=gettok(token,toksiz)){
	if(t!=ALPHA)
		break
	if(lookup(token,defn)==NO)
		break
	if(defn(1)==DEFTYPE){
		call getdef(token,toksiz,defn,MAXDEF)
		call instal(token,defn)
		}
	else if(defn(1)==LEXFUN){
		call getfn
		call scopy(sfun,1,token,1)
		t=ALPHA
		break
		}
	else if(defn(1)==LEXEND){
		call endst
		call scopy(send,1,token,1)
		t=ALPHA
		break
		}
	else
		call pbstr(defn)
	}
deftok=t
return
end

# docode - generate code for beginning of do

subroutine docode(lab)
implicit none
int labgen
int lab

#string dostr "do "

char dostr(4)
data dostr/LETD,LETO,BLANK,EOS/

call outtab
call outstr(dostr)
lab=labgen(2)
call outnum(lab)
call outch(BLANK)
call eatup
call outdon
return
end

# dostat - generate code for end of do statement

subroutine dostat(lab)
implicit none
int lab

call outcon(lab)
call outcon(lab+1)
return
end

# eatup - process rest of statement; interpret continuations

subroutine eatup
implicit none
char deftok
char token(MAXTOK),ptoken(MAXTOK),t
int nlpar

nlpar=0
repeat{
	t=deftok(token,MAXTOK)
	if(t==SEMICOL | t==NEWLINE)
		break
	if(t==RBRACE | t==LBRACE){
		call pbstr(token)
		break
		}
	if(t==EOF){
		call synerr('Unexpected EOF.')
		call pbstr(token)
		break
		}
	if(t==COMMA | t==EQUALS | t==PLUS | t==MINUS | t==STAR
		| t==AMPER | t==BAR)
		if(deftok(ptoken,MAXTOK)!=NEWLINE)
			call pbstr(ptoken)
	call parcnt(t,nlpar)
	call outstr(token)
	}until(nlpar<0)
if(nlpar!=0)
	call synerr('Unbalanced parenthesis.')
return
end

# elsec - generate code for end of if before else

subroutine elsec
implicit none

#string selse "else"

char selse(5)
data selse/LETE,LETL,LETS,LETE,EOS/

call outtab
call outstr(selse)
return
end

# endst - handle end statement

subroutine endst
implicit none
char ngetnb
char c

#include cfun.i
char funnam
common /cfun/funnam(MAXIDL)

if(ngetnb(c)!=EQUALS)	# "end=" in i/o statement?
	funnam(1)=EOS
call putbak(c)
return
end

# equal - compare str1 to str2; return YES if equal, NO if not

int function equal(str1,str2)
implicit none
char str1(ARB),str2(ARB)
int i

for(i=1; str1(i)==str2(i); i=i+1)
	if(str1(i)==EOS){
		equal=YES
		return
		}
equal=NO
return
end

# error - prints error message and then halts

subroutine error(msg)
implicit none
character*(*) msg

call synerr(msg)
stop
end

# fin - perform necessary cleanup

subroutine fin

return
end

# fopen - open file, returning logical unit number

int function fopen(lu,fname)
implicit none
int lu
char fname(MAXFNAME)
int i
character*MAXFNAME fn
character CHAR

fn=' '
for(i=1; fname(i)!=EOS; i=i+1)
	fn(i:i)=CHAR(fname(i))
open(lu,file=fn,status='old',iostat=i)
if(i==0)
	fopen=lu
else
	fopen=-1
return
end

# forcod - beginning of for statement

subroutine forcod(lab)
implicit none
char deftok
char t,token(MAXTOK)
int length,labgen
int i,j,lab,nlpar

#include cfor.i
int fordep
char forstk
common /cfor/fordep,forstk(MAXFOR)

#string ifnot "if(.not."

char ifnot(9)
data ifnot/LETI,LETF,LPAREN,PERIOD,LETN,LETO,LETT,PERIOD,EOS/

lab=labgen(3)
call outcon(0)
if(deftok(token,MAXTOK)!=LPAREN){
	call synerr('Missing left parenthesis.')
	return
	}
if(deftok(token,MAXTOK)!=SEMICOL){
	call pbstr(token)
	call outtab
	call eatup
	call outdon
	}
if(deftok(token,MAXTOK)==SEMICOL)
	call outcon(lab)
else{
	call pbstr(token)
	call outnum(lab)
	call outtab
	call outstr(ifnot)
	call outch(LPAREN)
	nlpar=0
	while(nlpar>=0){
		t=deftok(token,MAXTOK)
		if(t==SEMICOL)
			break
		call parcnt(t,nlpar)
		if(t!=NEWLINE & t!=RBRACE)
			call outstr(token)
		}
	call outch(RPAREN)
	call outch(RPAREN)
	call outgo(lab+2)
	if(nlpar<0)
		call synerr('Invalid for clause.')
	}
fordep=fordep+1
j=1
for(i=1; i<fordep; i=i+1)
	j=j+length(forstk(j))+1
forstk(j)=EOS
nlpar=0
while(nlpar>=0){
	t=deftok(token,MAXTOK)
	call parcnt(t,nlpar)
	if(nlpar>=0 & t!=NEWLINE & t!=RBRACE){
		call scopy(token,1,forstk,j)
		j=j+length(token)
		}
	}
lab=lab+1
return
end

# fors - process end of for statement

subroutine fors(lab)
implicit none
int length
int i,j,lab

#include cfor.i
int fordep
char forstk
common /cfor/fordep,forstk(MAXFOR)

call outnum(lab)
j=1
for(i=1; i<fordep; i=i+1)
	j=j+length(forstk(j))+1
if(length(forstk(j))>0){
	call outtab
	call outstr(forstk(j))
	call outdon
	}
call outgo(lab-1)
call outcon(lab+1)
fordep=fordep-1
return
end

# getc - getc characters from input file

char function getc(c)
implicit none
char c,buf(MAXLINE)
int i,len,lastc

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

data lastc/MAXLINE/
data buf(MAXLINE)/NEWLINE/

20 if(buf(lastc)==NEWLINE | lastc>=MAXLINE){
	read(ipt,9070,end=10)len,(buf(i),i=1,len)
9070	format(q, MAXCARD a1)
	linect=linect+1
	buf(len+1)=NEWLINE
	lastc=0
	}
lastc=lastc+1
c=buf(lastc)
getc=c
return

10 if(level>1){
	close(ipt)
	call popfs
	call assoc
	lastc=MAXLINE
	goto 20
	}
else{
	c=EOF
	getc=EOF
	}
return
end

# getdef - get name and definition

subroutine getdef(token,toksiz,defn,defsiz)
implicit none
char gettok,ngetc
int defsiz,toksiz,nlpar,i
char defn(defsiz),token(toksiz),c

if(ngetc(c)!=LPAREN){
	call putbak(c)
	if(gettok(token,toksiz)!=ALPHA)
		call synerr('Non-alphanumeric name.')
	c=gettok(defn,defsiz)
	call pbstr(defn)
	for(i=1; i<defsiz; i=i+1){
		c=ngetc(defn(i))
		if(c==NEWLINE | c==SHARP | c==EOF){
			call putbak(c)
			break
			}
		}
	if(i==defsiz)
		call synerr('Definition too long.')
	defn(i)=BLANK
	for( ; defn(i)==BLANK | defn(i)==TAB; i=i-1)
		defn(i)=EOS
	}
else{
	if(gettok(token,toksiz)!=ALPHA)
		call synerr('Non-alphanumeric name.')
	else if(ngetc(c)!=COMMA){
		if(c==RPAREN)
			call putbak(c)
		else
			call synerr('Missing comma in define.')
		}
	# else got (name
	nlpar=0
	for(i=1; nlpar>=0; i=i+1){
		if(i>defsiz){
			call synerr('Definition too long.')
			break
			}
		else if(ngetc(defn(i))==EOF){
			call synerr('Missing right parenthesis.')
			break
			}
		call parcnt(defn(i),nlpar)
		# else normal character in defn(i)
		}
	defn(i-1)=EOS
	}
return
end

# getfn - get function name

subroutine getfn
implicit none
char gettok
char c

#include cfun.i
char funnam
common /cfun/funnam(MAXIDL)

c=gettok(funnam,MAXIDL)
call pbstr(funnam)
if(c!=ALPHA){
	call synerr('Non-alphanumeric function name.')
	funnam(1)=EOS
	}
return
end

# gettok - get token for Ratfor

char function gettok(lexstr,toksiz)
implicit none
char ngetc,type
int i,toksiz
char lexstr(toksiz),c

while(ngetc(c)!=EOF)
	if(c!=BLANK & c!=TAB)
		break
call putbak(c)
for(i=1;i<toksiz; i=i+1){
	gettok=type(ngetc(lexstr(i)))
	if(gettok!=LETTER & gettok!=DIGIT)
		break
	}
if(i>=toksiz)
	call synerr('Token too long.')
if(i>1){		# some alpha seen
	call putbak(lexstr(i))	# went one too far
	i=i-1
	gettok=ALPHA
	}
else if(lexstr(1)==EQUALS | lexstr(1)==GREATER | lexstr(1)==LESS
	| lexstr(1)==NOT | lexstr(1)==BAR | lexstr(1)==AMPER
	| lexstr(1)==EXCLAIM)
	call relate(lexstr,i)
else if(lexstr(1)==NEWLINE){
	gettok=NEWLINE
	}
else if(lexstr(1)==SHARP){	# strip comments
	while(ngetc(lexstr(1))!=NEWLINE)
		;
	gettok=NEWLINE
	}
else if(lexstr(1)==SQUOTE | lexstr(1)==DQUOTE)
	for(i=2; ngetc(lexstr(i))!=lexstr(1); i=i+1){
		if(lexstr(i)==NEWLINE | i>=toksiz-1){
			call synerr('Missing quote.')
			lexstr(i)=lexstr(1)
			call putbak(NEWLINE)
			break
			}
		}
lexstr(i+1)=EOS
return
end

# hashs - hash a string into number from 0 to tabsiz-1

int function hashs(s,tabsiz)
implicit none
char s(ARB)
int i,tabsiz

hashs=0
for(i=1; s(i)!=EOS; i=i+1)
	hashs=mod(hashs*2+s(i),tabsiz)
return
end

# ifcode - generate initial code for if

subroutine ifcode(lab)
implicit none
int labgen
int lab

lab=labgen(2)
call ifthen
return
end

# ifend - generate "endif"

subroutine ifend
implicit none

#string sendif "endif"

char sendif(6)
data sendif/LETE,LETN,LETD,LETI,LETF,EOS/

call outtab
call outstr(sendif)
call outdon
return
end

# ifgo - generate "if(.not.(...))goto lab"

subroutine ifgo(lab)
implicit none
int lab

#string ifnot "if(.not."

char ifnot(9)
data ifnot/LETI,LETF,LPAREN,PERIOD,LETN,LETO,LETT,PERIOD,EOS/

call outtab
call outstr(ifnot)
call balpar
call outch(RPAREN)
call outgo(lab)
return
end

# ifthen - generate "if(...)then"

subroutine ifthen
implicit none

#string sif "if"
#string sthen "then"

char sif(3),sthen(5)
data sif/LETI,LETF,EOS/
data sthen/LETT,LETH,LETE,LETN,EOS/

call outtab
call outstr(sif)
call balpar
call outstr(sthen)
call outdon
return
end

# includ - file inclusion

subroutine includ
implicit none
char fname(MAXFNAME),t
char gettok,ngetc
int fd
int length,fopen,pushfs

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

t=gettok(fname,MAXFNAME)
while(ngetc(t)!=NEWLINE)	# eatup rest of line
	;
if(fname(1)==DQUOTE){
	call scopy(fname,2,fname,1)	# copy forwards
	fname(length(fname))=EOS
	}
fd=fopen(STDIN+level,fname)		# get a unit #
if(fd<0)
	call synerr('Cannot open include file.')
else if(pushfs(fd)==NO){
	call synerr('Includes nested too deeply.')
	close(fd)
	}
else
	call assoc
return
end

# init - perform necessary initialization

subroutine init
implicit none
character*32 rati,rato
integer status

#string sdo "do"
#string sif "if"
#string sfor "for"
#string selse "else"
#string snext "next"
#string sbreak "break"
#string suntil "until"
#string swhile "while"
#string srept "repeat"
#string sstr "string"
#string sincl "include"
#string sdef "define"
#string sfun "function"
#string sret "return"
#string send "end"

char sdo(3),sif(3),sfor(4),selse(5),snext(5),sbreak(6),suntil(6)
char swhile(6),srept(7),sstr(7),sincl(8),sdef(7),sfun(9),sret(7),send(4)
data sdo/LETD,LETO,EOS/
data sif/LETI,LETF,EOS/
data sfor/LETF,LETO,LETR,EOS/
data selse/LETE,LETL,LETS,LETE,EOS/
data snext/LETN,LETE,LETX,LETT,EOS/
data sbreak/LETB,LETR,LETE,LETA,LETK,EOS/
data suntil/LETU,LETN,LETT,LETI,LETL,EOS/
data swhile/LETW,LETH,LETI,LETL,LETE,EOS/
data srept/LETR,LETE,LETP,LETE,LETA,LETT,EOS/
data sstr/LETS,LETT,LETR,LETI,LETN,LETG,EOS/
data sincl/LETI,LETN,LETC,LETL,LETU,LETD,LETE,EOS/
data sdef/LETD,LETE,LETF,LETI,LETN,LETE,EOS/
data sfun/LETF,LETU,LETN,LETC,LETT,LETI,LETO,LETN,EOS/
data sret/LETR,LETE,LETT,LETU,LETR,LETN,EOS/
data send/LETE,LETN,LETD,EOS/

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

call ratfil(rati,rato,status)
if(status != 0)
	call exit
open(STDERR,file='sys$output',status='new',carriagecontrol='list')
open(STDOUT,file=rato,status='new',carriagecontrol='list')
open(STDIN,file=rati,status='old',readonly,err=1000)
linect=0
call instkw(sdo,LEXDO)
call instkw(sif,LEXIF)
call instkw(sfor,LEXFOR)
call instkw(selse,LEXELSE)
call instkw(snext,LEXNEXT)
call instkw(sbreak,LEXBREAK)
call instkw(suntil,LEXUNTIL)
call instkw(swhile,LEXWHILE)
call instkw(srept,LEXREPT)
call instkw(sstr,LEXSTRING)
call instkw(sincl,LEXINCL)
call instkw(sdef,DEFTYPE)
call instkw(sfun,LEXFUN)
call instkw(sret,LEXRET)
call instkw(send,LEXEND)
call assoc
return
1000 write(STDERR,'(''Ratfor: cannot open input file'')')
call exit
end

# instal - add name and definition to table

subroutine instal(name,defn)
implicit none
char name(MAXTOK),defn(MAXDEF)
int equal,length,hashs
int dlen,nlen,ptr,n

#include clook.i
int lastt,namptr
char table
common /clook/lastt,namptr(MAXPTR),table(MAXTBL)

nlen=length(name)+1
dlen=length(defn)+1
if(lastt+nlen+dlen>MAXTBL)
	call error('Too many definitions.')
ptr=hashs(name,MAXPTR)+1
n=0
while(namptr(ptr)!=0){
	if(equal(name,table(namptr(ptr)))==YES){	# redefine old name
		call synerr('Warning - symbol redefined.')
		break
		}
	ptr=ptr+1
	if(ptr>MAXPTR)
		ptr=1
	n=n+1
	if(n>=MAXPTR)
		call error('Hash table overflow.')
	}
namptr(ptr)=lastt
call scopy(name,1,table,lastt)
call scopy(defn,1,table,lastt+nlen)
lastt=lastt+nlen+dlen
return
end

# instkw - install keywords

subroutine instkw(lexnam,lexord)
implicit none
char lexnam(MAXTOK),lexdef(2)
int lexord

data lexdef/EOS,EOS/

lexdef(1)=lexord
call instal(lexnam,lexdef)
return
end

# itoa - convert int to char string in str

int function itoa(int,str,size)
implicit none
int iabs,mod
int d,i,int,intval,j,size
char k,str(size)

#string digits "0123456789"

char digits(10)
data digits/DIG0,DIG1,DIG2,DIG3,DIG4,DIG5,
	DIG6,DIG7,DIG8,DIG9/

intval=iabs(int)
str(1)=EOS
i=1
repeat{
	i=i+1
	d=mod(intval,10)
	str(i)=digits(d+1)
	intval=intval/10
	}until(intval==0 | i>=size)
if(int<0 & i<size){	# then sign
	i=i+1
	str(i)=MINUS
	}
itoa=i-1
for(j=1; j<i; j=j+1){	# then reverse
	k=str(i)
	str(i)=str(j)
	str(j)=k
	i=i-1
	}
return
end

# labelc - output statement number

subroutine labelc(lexstr)
implicit none
char lexstr(ARB)
int length

if(length(lexstr)==5)	# warn about 23xxx labels
	if(lexstr(1)==DIG2 & lexstr(2)==DIG3)
		call synerr('Warning - possible label conflict.')
call outstr(lexstr)
call outtab
return
end

# labgen - generate n consecutive labels, return first one

int function labgen(n)
implicit none
int label,n
data label/23000/

labgen=label
label=label+n
return
end

# length - compute length of string

int function length(str)
implicit none
char str(ARB)

for(length=0; str(length+1)!=EOS; length=length+1)
	;
return
end

# lex - return lexical type of token

char function lex(lexstr,lexsiz)
implicit none
char deftok
int lexsiz
char lexstr(lexsiz)
int alldig

while(deftok(lexstr,lexsiz)==NEWLINE)
	;
lex=lexstr(1)
if(lex==EOF | lex==SEMICOL | lex==LBRACE | lex==RBRACE)
	return
if(alldig(lexstr)==YES)
	lex=LEXDIGITS
else if(lex!=LEXIF & lex!=LEXELSE & lex!=LEXWHILE
	& lex!=LEXFOR & lex!=LEXBREAK & lex!=LEXNEXT
	& lex!=LEXUNTIL & lex!=LEXREPT & lex!=LEXDO
	& lex!=LEXRET & lex!=LEXEND
	& lex!=LEXSTRING & lex!=LEXINCL)
	lex=LEXOTHER
return
end

# lookup - locate name, extract definition from table

int function lookup(name,defn)
implicit none
int hashs
char name(MAXTOK),defn(MAXDEF)
int j,k,n,ptr

#include clook.i
int lastt,namptr
char table
common /clook/lastt,namptr(MAXPTR),table(MAXTBL)

ptr=hashs(name,MAXPTR)+1
n=0
while(namptr(ptr)!=0){
	j=namptr(ptr)
	for(k=1; name(k)==table(j) & name(k)!=EOS; k=k+1)
		j=j+1
	if(name(k)==table(j)){	# got one
		call scopy(table,j+1,defn,1)
		lookup=YES
		return
		}
	ptr=ptr+1
	if(ptr>MAXPTR)
		ptr=1
	n=n+1
	if(n>=MAXPTR)
		break
	}
lookup=NO
return
end

# ngetnb - get next non blank character

char function ngetnb(c)
implicit none
char ngetc
char c

repeat
	ngetnb=ngetc(c)
	until(c!=BLANK & c!=TAB)
return
end

# ngetc - get a (possibly pushed back) character

char function ngetc(c)
implicit none
char getc
char c

#include cdefio.i
int bp
char buf
common /cdefio/bp,buf(BUFSIZ)

if(bp>0)
	c=buf(bp)
else{
	bp=1
	buf(1)=getc(c)
	}
bp=bp-1
ngetc=c
return
end

# otherc - output ordinary Fortran statement

subroutine otherc(lexstr)
implicit none
char lexstr(ARB)

call outtab
call outstr(lexstr)
call outch(BLANK)
call eatup
call outdon
return
end

# outch - put one character in output buffer

subroutine outch(c)
implicit none
char c
int i

#include coutln.i
int outp
char outbuf
common /coutln/outp,outbuf(MAXLINE)

if(outp>=72){
	call outdon
	for(i=1; i<6; i=i+1)
		outbuf(i)=BLANK
	outbuf(6)=DOLLAR
	outp=6
	}
outp=outp+1
outbuf(outp)=c
return
end

# outcon - output "n continue"

subroutine outcon(n)
implicit none
int n

#string contin "continue"

char contin(9)
data contin/LETC,LETO,LETN,LETT,LETI,LETN,LETU,LETE,EOS/

if(n>0)
	call outnum(n)
call outtab
call outstr(contin)
call outdon
return
end

# outdon - finish off an output line

subroutine outdon
implicit none

#include coutln.i
int outp
char outbuf
common /coutln/outp,outbuf(MAXLINE)

outbuf(outp+1)=NEWLINE
outbuf(outp+2)=EOS
call putlin(outbuf)
outp=0
return
end

# outgo - output "goto n"

subroutine outgo(n)
implicit none
int n

#string goto "goto"

char goto(6)
data goto/LETG,LETO,LETT,LETO,BLANK,EOS/

call outtab
call outstr(goto)
call outnum(n)
call outdon
return
end

# outlit - outputs single character in appropriate nammer

subroutine outlit(c)
implicit none
char c
integer izext

call outnum(izext(c))
return
end

# outnum - output decimal number

subroutine outnum(n)
implicit none
int itoa
int i,len,n
char chars(MAXCHARS)

len=itoa(n,chars,MAXCHARS)
for(i=1; i<=len; i=i+1)
	call outch(chars(i))
return
end

# outstr - output string

subroutine outstr(str)
implicit none
char str(ARB)
int i

for(i=1; str(i)!=EOS; i=i+1)
	call outch(str(i))
return
end

# outtab - get past column 6

subroutine outtab
implicit none

#include coutln.i
int outp
char outbuf
common /coutln/outp,outbuf(MAXLINE)

while(outp<6)
	call outch(BLANK)
return
end

# parcnt - count parentheses

subroutine parcnt(t,cnt)
implicit none
char t
int cnt

if(t==LPAREN)
	cnt=cnt+1
else if(t==RPAREN)
	cnt=cnt-1
return
end

# parse - parse Ratfor source program

subroutine parse
implicit none
char lex
char lexstr(MAXTOK),lextyp(MAXSTACK),t,u
int lab,sp,labval(MAXSTACK)

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

sp=1
lextyp(1)=EOF
for(t=lex(lexstr,MAXTOK); t!=EOF; t=lex(lexstr,MAXTOK)){
	if(t==LEXIF)
		call ifthen
	else if(t==LEXELSE){
		if(lextyp(sp)==LEXIF){
			call elsec
			u=lex(lexstr,MAXTOK)	# peek at next token
			if(u==LEXIF){
				call ifthen
				next
				}
			else{
				call pbstr(lexstr)
				call outdon
				}
			}
		else
			call synerr('Illegal else.')
		}
	else if(t==LEXDO)
		call docode(lab)
	else if(t==LEXWHILE)
		call whilec(lab)
	else if(t==LEXFOR)
		call forcod(lab)
	else if(t==LEXREPT)
		call repcod(lab)
	else if(t==LEXDIGITS)
		call labelc(lexstr)
	else if(t==LEXSTRING)
		call strdec
	else if(t==LEXINCL)
		call includ
	else if(t==LEXRET)
		call retgen
	if(t==LEXIF | t==LEXELSE | t==LEXWHILE
		| t==LEXFOR | t==LEXREPT | t==LEXDO
		| t==LEXDIGITS | t==LBRACE){
		sp=sp+1		# beginning of statement
		if(sp>MAXSTACK)
			call error('Stack overflow in parser.')
		lextyp(sp)=t
		labval(sp)=lab
		}
	else{	# end of statement - prepare to unstack
		if(t==RBRACE){
			if(lextyp(sp)==LBRACE)
				sp=sp-1
			else
				call synerr('Illegal right brace.')
			}
		else if(t==LEXOTHER)
			call otherc(lexstr)
		else if(t==LEXBREAK | t==LEXNEXT)
			call brknxt(sp,lextyp,labval,t)
		t=lex(lexstr,MAXTOK)	# peek at next token
		call pbstr(lexstr)
		call unstak(sp,lextyp,labval,t)
		}
	}
if(sp!=1)
	call synerr('Unexpected EOF.')
return
end

# pbstr - push string back onto input

subroutine pbstr(str)
implicit none
char str(MAXLINE)
int length
int i

for(i=length(str); i>0; i=i-1)
	call putbak(str(i))
return
end

# popfs - pop old file id from stack

subroutine popfs
implicit none

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

#include cfstak.i
int lineno,luns
common /cfstak/lineno(MAXINCL),luns(MAXINCL)

if(level>1){
	level=level-1
	ipt=luns(level)
	linect=lineno(level)
	}
return
end

# pushfs - push old file id onto stack

int function pushfs(lu)
implicit none
int lu

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

#include cfstak.i
int lineno,luns
common /cfstak/lineno(MAXINCL),luns(MAXINCL)

if(level<=MAXINCL){
	luns(level)=ipt
	lineno(level)=linect
	linect=1
	level=level+1
	ipt=lu
	pushfs=YES
	}
else
	pushfs=NO
return
end

# putbak - push character back onto input

subroutine putbak(c)
implicit none
char c

#include cdefio.i
int bp
char buf
common /cdefio/bp,buf(BUFSIZ)

bp=bp+1
if(bp>BUFSIZ)
	call error('Too many characters pushed back.')
buf(bp)=c
return
end

# putc - puts character on output unit

subroutine putc(c)
implicit none
char buf(MAXLINE),c
int i,lastc

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

data lastc/0/

if(lastc>=MAXCARD | c==NEWLINE){
	write(opt,9060)(buf(i),i=1,lastc)
	9060 format(MAXCARD a1)
	lastc=0
	}
if(c!=NEWLINE){
	lastc=lastc+1
	buf(lastc)=c
	}
return
end

# putlin - puts a line on output

subroutine putlin(str)
implicit none
char str(ARB)
int i

for(i=1; str(i)!=EOS; i=i+1)
	call putc(str(i))
return
end

# relate - converts symbolic relationals into Fortran

subroutine relate(token,last)
implicit none
char ngetc
char token(MAXTOK),t
int length
int last

#string dotand ".and."
#string doteq ".eq."
#string dotge ".ge."
#string dotgt ".gt."
#string dotle ".le."
#string dotlt ".lt."
#string dotne ".ne."
#string dotnot ".not"
#string dotor ".or"

char dotand(6),doteq(5),dotge(5),dotgt(5),dotle(5)
char dotlt(5),dotne(5),dotnot(6),dotor(5)
data dotand/PERIOD,LETA,LETN,LETD,PERIOD,EOS/
data doteq/PERIOD,LETE,LETQ,PERIOD,EOS/
data dotge/PERIOD,LETG,LETE,PERIOD,EOS/
data dotgt/PERIOD,LETG,LETT,PERIOD,EOS/
data dotle/PERIOD,LETL,LETE,PERIOD,EOS/
data dotlt/PERIOD,LETL,LETT,PERIOD,EOS/
data dotne/PERIOD,LETN,LETE,PERIOD,EOS/
data dotnot/PERIOD,LETN,LETO,LETT,PERIOD,EOS/
data dotor/PERIOD,LETO,LETR,PERIOD,EOS/

t=ngetc(token(2))
if(t!=EQUALS & t!=GREATER & t!=LESS)
	call putbak(token(2))
if(token(1)==EQUALS)
	if(token(2)==EQUALS)
		call scopy(doteq,1,token,1)
	else
		token(2)=EOS
else if(token(1)==EXCLAIM)
	if(token(2)==EQUALS)
		call scopy(dotne,1,token,1)
	else
		call scopy(dotnot,1,token,1)
else if(token(1)==LESS)
	if(token(2)==EQUALS)
		call scopy(dotle,1,token,1)
	else
		call scopy(dotlt,1,token,1)
else if(token(1)==GREATER)
	if(token(2)==EQUALS)
		call scopy(dotge,1,token,1)
	else
		call scopy(dotgt,1,token,1)
else if(token(1)==AMPER)
	call scopy(dotand,1,token,1)
else if(token(1)==BAR)
	call scopy(dotor,1,token,1)
else
	token(2)=EOS
last=length(token)
return
end

# repcod - generate code for beginning of repeat

subroutine repcod(lab)
implicit none
int labgen
int lab

call outcon(0)
lab=labgen(3)
call outcon(lab)
lab=lab+1
return
end

# retgen - generate return statement

subroutine retgen
implicit none
char deftok
char token(MAXTOK),c

#string sret "return"

char sret(7)
data sret/LETR,LETE,LETT,LETU,LETR,LETN,EOS/

#include cfun.i
char funnam
common /cfun/funnam(MAXIDL)

c=deftok(token,MAXTOK)
call pbstr(token)
if(c!=NEWLINE & c!=SEMICOL){
	if(funnam(1)==EOS)
		call synerr('No function name.')
	else{
		call outtab
		call outstr(funnam)
		call outch(EQUALS)
		call eatup
		call outdon
		}
	}
call outtab
call outstr(sret)
call outdon
return
end

# scopy - copy string at from(i) to to(j)

subroutine scopy(from,i,to,j)
implicit none
char from(ARB),to(ARB)
int i,j,k1,k2

k2=j
for(k1=i; from(k1)!=EOS; k1=k1+1){
	to(k2)=from(k1)
	k2=k2+1
	}
to(k2)=EOS
return
end

# strdec - declare and initialize strings

subroutine strdec
implicit none
char deftok
char t,token(MAXTOK),str(MAXSTR),arrnam(MAXNAM)
int i,len
int length,lookup

#string datstr "data "
#string strtyp "char"
#string sint "integer"

char datstr(6),strtyp(5),sint(8)
data datstr/LETD,LETA,LETT,LETA,BLANK,EOS/
data strtyp/LETC,LETH,LETA,LETR,EOS/
data sint/LETI,LETN,LETT,LETE,LETG,LETE,LETR,EOS/

t=deftok(arrnam,MAXNAM)
if(t!=ALPHA)
	call synerr('Illegal string name.')
t=deftok(str,MAXSTR)
if(t!=DQUOTE)
	call synerr('Bad string.')
len=length(str)
call outtab
if(lookup(strtyp,token)==NO)	# use "integer" for char
	call outstr(sint)
else
	call outstr(token)
call outch(BLANK)
call outstr(arrnam)
call outch(LPAREN)
call outnum(len-1)
call outch(RPAREN)
call outdon

call outtab
call outstr(datstr)
call outstr(arrnam)
call outch(SLASH)
for(i=2; i<len; i=i+1){
	call outlit(str(i))
	call outch(COMMA)
	}
call outlit(EOS)
call outch(SLASH)
call outdon
return
end

# synerr - report Ratfor syntax error

subroutine synerr(msg)
implicit none
character*(*) msg

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname

write(STDERR,9050)cfname,linect,msg
9050 format(1x,a,':',i4,': ',a)
return
end

# type - returns type of character

char function type(c)
implicit none
char c

type=c
if((type>=LETA & type<=LETZ) | (type>=UPA & type<=UPZ))
	type=LETTER
else if(type>=DIG0 & type<=DIG9)
	type=DIGIT
return
end

# unstak - unstack at end of statement

subroutine unstak(sp,lextyp,labval,token)
implicit none
char lextyp(MAXSTACK),token
int labval(MAXSTACK),sp

for( ; sp>1; sp=sp-1){
	if(lextyp(sp)==LBRACE)
		break
	if(lextyp(sp)==LEXIF & token==LEXELSE)
		break
	if(lextyp(sp)==LEXIF)
		call ifend
	else if(lextyp(sp)==LEXELSE){
		if(sp>2)
			sp=sp-1
		call ifend
		}
	else if(lextyp(sp)==LEXDO)
		call dostat(labval(sp))
	else if(lextyp(sp)==LEXWHILE)
		call whiles(labval(sp))
	else if(lextyp(sp)==LEXFOR)
		call fors(labval(sp))
	else if(lextyp(sp)==LEXREPT)
		call untils(labval(sp),token)
	}
return
end

# untils - generate code for until or end of repeat

subroutine untils(lab,token)
implicit none
char token,junk,ptoken(MAXTOK)
char lex
int lab

call outnum(lab)
if(token==LEXUNTIL){
	junk=lex(ptoken,MAXTOK)
	call ifgo(lab-1)
	}
else
	call outgo(lab-1)
call outcon(lab+1)
return
end

# whilec - generate code for beginning of while

subroutine whilec(lab)
implicit none
int labgen
int lab

call outcon(0)
lab=labgen(2)
call outnum(lab)
call ifthen
return
end

# whiles - generate code for end of while

subroutine whiles(lab)
implicit none
int lab

call outgo(lab)
call ifend
call outcon(lab+1)
return
end

# blockdata

blockdata
implicit none

#include cfile.i
int ipt,opt,linect,level
character*MAXFNAME cfname
common /cfile/ipt,opt,linect,level,cfname
data ipt,opt,level,cfname/STDIN,STDOUT,1,' '/

#include cfstak.i
int lineno,luns
common /cfstak/lineno(MAXINCL),luns(MAXINCL)

#include cdefio.i
int bp
char buf
common /cdefio/bp,buf(BUFSIZ)
data bp/0/

#include cfor.i
int fordep
char forstk
common /cfor/fordep,forstk(MAXFOR)
data fordep/0/

#include clook.i
int lastt,namptr
char table
common /clook/lastt,namptr(MAXPTR),table(MAXTBL)
data lastt,namptr/1,MAXPTR*0/

#include coutln.i
int outp
char outbuf
common /coutln/outp,outbuf(MAXLINE)
data outp/0/

#include cfun.i
char funnam
common /cfun/funnam(MAXIDL)
data funnam(1)/EOS/
end
