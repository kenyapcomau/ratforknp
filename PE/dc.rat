## dc - desk calculator

define(character,integer)	# define character data type
define(STDIN,7)		# standard input file
define(STDOUT,6)	# standard output file
define(MAXCARD,80)
define(MAXLINE,81)
define(ARB,*)
define(ERR,-3)
define(EOF,-1)
define(EOS,0)
define(TAB,9)
define(NEWLINE,10)
define(BLANK,32)
define(AMPER,38)	# ampersand
define(BANG,33)		# exclamation mark
define(BAR,124)
define(BIGA,65)
define(BIGZ,90)
define(CARET,94)
define(DIG0,48)
define(DIG1,49)
define(DIG2,50)
define(DIG3,51)
define(DIG4,52)
define(DIG5,53)
define(DIG6,54)
define(DIG7,55)
define(DIG8,56)
define(DIG9,57)
define(DQUOTE,34)
define(EQUALS,61)
define(GREATER,62)
define(LESS,60)
define(LETA,97)
define(LETZ,122)
define(LPAREN,40)
define(MINUS,45)
define(PERCENT,37)
define(PERIOD,46)
define(PLUS,43)
define(RPAREN,41)
define(SLASH,47)
define(STAR,42)
define(TILDE,126)
define(UNDERLINE,95)
define(DIGIT,DIG0)
define(LETTER,LETA)
define(NO,0)
define(YES,1)
define(FILENAMESIZE,30)	# max characters in file name
			# (including EOS)
define(MAXTOK,MAXLINE)
define(OP,1)
define(OPND,2)
define(SEP,3)
define(OPDONE,1)
define(OPGO,2)
define(OPLP,3)
define(OPRP,4)
define(OPOR,5)
define(OPAND,6)
define(OPNOT,7)
define(OPEQ,8)
define(OPNE,9)
define(OPGT,10)
define(OPGE,11)
define(OPLT,12)
define(OPLE,13)
define(OPADD,14)
define(OPSUB,15)
define(OPMUL,16)
define(OPDIV,17)
define(OPNEG,18)
define(OPMOD,19)
define(OPEXP,20)
define(OPPLUS,21)
define(MAXOP,21)
define(OPERR,-1)
define(MAXSTACK,200)	# evaluation stack
define(MEMSIZE,4000)

# Defines for memory management routines:
define(LAMBDA,0)	# nil pointer
define(DSMEMEND,1)	# pointer to end of memory
define(DSAVAIL,2)	# start of available space list
define(DSCLOSE,8)	# threshhold for close-fitting blocks
define(DSLINK,1)	# link field of storage block
define(DSSIZE,0)	# size field of storage block
define(DSOHEAD,2)	# total words of overhead per block

# Defines for symbol table routines:
define(STLINK,0)	# offset of link field in symbol table node
define(STDATA,1)	# offset of data field in symbol table node
define(STHTABSIZE,43)	# should be a prime number

implicit none
include "ctab.i"
integer mktabl

call carcon(STDOUT,0)
call dsinit (MEMSIZE)
idtab = mktabl (1)
call dcexp (STDIN)
end

## binop - evaluates top 3 items on eval stack
subroutine binop

implicit none
integer l, r, result, op
include "cexp.i"

r = tokst(top)
op = tokst(top-1)
l = tokst(top-2)
top = top - 2
if(op == OPOR)
	{
	if (l != 0 | r != 0)result = 1
	else result = 0
	}
else if(op == OPAND)
	{
	if (l != 0 & r != 0)result = 1
	else result = 0
	}
else if(op == OPNOT)
	{
	if (r == 0)result = 1
	else result = 0
	}
else if(op == OPEQ)
	{
	if (l == r)result = 1
	else result = 0
	}
else if(op == OPNE)
	{
	if (l != r)result = 1
	else result = 0
	}
else if(op == OPGT)
	{
	if (l > r)result = 1
	else result = 0
	}
else if(op == OPGE)
	{
	if (l >= r)result = 1
	else result = 0
	}
else if(op == OPLT)
	{
	if (l < r)result = 1
	else result = 0
	}
else if(op == OPLE)
	{
	if (l <= r)result = 1
	else result = 0
	}
else if(op == OPADD)
	result = l + r
else if(op == OPSUB)
	result = l - r
else if(op == OPNEG)
	result = (-r)
else if(op == OPMUL)
	result = l * r
else if(op == OPDIV)
	result = l / r
else if(op == OPMOD)
	result = mod(l,r)
else if(op == OPEXP)
	result = l**r
else if(op == OPPLUS)
	result = (+r)
tokst(top) = result
return
end

# ctonum - string to number with radix control

integer function ctonum(buf,i,dradix)
implicit none
character buf(ARB), tmp(MAXLINE)
integer chtoi
external index
integer i, j, c, n, val, radix, dradix, m
string digits "0123456789abcdefABCDEF"
string errmsg "radix error"

if (buf(i) == MINUS)
	{
	i = i + 1
	m = -1
	}
else m = 1
for (n=0;;i=i+1)
	{	#collect digits
	c = index(digits,buf(i))
	if (c==0) break
	if (c > 16) c = c-6	# convert to lower case
	n = n+1
	tmp(n) = c-1		# save digit value
	}
if (buf(i) == UNDERLINE)
	{			# get new radix, default radix is 10.
	radix = 0
	i = i+1
	radix = chtoi(buf,i)
	}
else radix = dradix
val = 0
for (j=1; j<=n; j = j+1)
	{
	c = tmp(j)
	if (c >= radix)
		{
		call putlin(errmsg, STDOUT)
		call putch(NEWLINE, STDOUT)
		}
	val = val * radix + c
	}
return ( m*val )
end

## dcexp - read file and process desk calculator expressions

subroutine dcexp (fd)

implicit none
integer fd, junk, i, answer, save
integer getlin, numtoc, exptoi, index, strcmp
external index
integer ibase, obase, ubase, radexp, eqloc
character line(MAXLINE), name(MAXTOK)
include "ctab.i"
string errmsg ":  invalid expression"
string ibname "ibase"
string obname "obase"

ibase = 10
obase = 10
call enter (ibname, ibase, idtab)
call enter (obname, obase, idtab)
while(getlin(line, fd) != EOF)
	{
	radexp = 0		# assume not radix expression
	call strip(line)	# remove blanks, tabs, NEWLINEs
	i = 1
	save = index(line, EQUALS)	# see if result should be stored
	if (save != 0)
		{
		if (line(save+1) == EQUALS)	# oops, found relational
			save = 0
		else
			{
			eqloc = save
			i = save + 1
			line(eqloc) = EOS
			call scopy(line, 1, name, 1)
			if (strcmp(name,ibname) == 0 |
				strcmp(name,obname) == 0)
					radexp = 1
			}
		}
	else
		{
		if (strcmp(line,ibname) == 0 |
			strcmp(line,obname) == 0)
			radexp = 1
		}
	ubase = ibase
	if (radexp == 1)
		ubase = 10
	answer = exptoi(line, i, ubase)
	if (line(i) != EOS)		# error
		{
		if (save != 0) line(eqloc) = EQUALS
		call putlin(line, STDOUT)
		call putlin(errmsg, STDOUT)
		call putch(NEWLINE, STDOUT)
		}
	else
		{
		ubase = obase
		if (radexp == 1 | save != 0)
			ubase = 10
		junk = numtoc(answer, line, MAXLINE, ubase)
		if (save != 0)	# store answer
			{
			call enter (name, answer, idtab)
			if (strcmp(ibname,name) == 0)
					ibase = answer
			if (strcmp(obname,name) == 0)
					obase = answer
			}
		else
			{
			call putlin(line, STDOUT)
			call putch(NEWLINE, STDOUT)
			}
		}
	}
return
end

## exptoi - evalutate arithmetic expression

integer function exptoi (exp, ptr, radix)

implicit none
integer exptok, stackx
character exp(ARB)
integer ptr, radix
integer k, tok, kind, preced(MAXOP)
include "cexp.i"

# precedence of respective operators
data preced(1), preced(2), preced(3), preced(4), preced(5),
     preced(6), preced(7), preced(8), preced(9), preced(10),
     preced(11), preced(12), preced(13), preced(14), preced(15),
     preced(16), preced(17), preced(18),
     preced(19), preced(20), preced(21) / 0,  0,	# EOS, startexpr
	1,  1,		# (  )
	2,  2,		# |  &
	3,		# ! (or ^ or ~)
	4,4,4,4,4,4,	# == != > >= < <=
	5,  5,		# +  -
	6,  6,		# *  /
	8,  6,  7, 8/	# neg, mod, expon, plus

k = ptr
top = 1
tokst(top) = OPGO
kindst(top) = SEP

while (exptok(exp, k, tok, kind, radix) == YES)	# loop thru legal toks
	{
	if (kind == OPND)
		{
		if (kindst(top) == OPND)
			return(0)
		}
	else if (kind == OP)
		{
		if (kindst(top) == OP)
			return(0)
		else if (kindst(top) == SEP)
			{	# check for unary +,- or !
			if (tok != OPADD & tok != OPSUB & tok != OPNOT)
					return(0)
			if (stackx(0, OPND) == ERR)
					return(0)
			if (tok == OPADD)
					tok = OPPLUS
			else if (tok == OPSUB)
					tok = OPNEG
			}
		else		# kindst(top) == OPND
			{
			if (kindst(top-1) == OP)
					{
					while(preced(tokst(top-1)) >= preced(tok))
						call binop
					}
			}
		}
	else			# (kind == SEP)
		{
		if (tok != OPLP)	# if tok == ( or tok == EOS
			{
			if (kindst(top) != OPND)
					return(0)
			while(preced(tokst(top-1)) > preced(tok))
					{
					if (kindst(top-1) == OP)
						call binop
					else
						return(0)	# no right paren
					}
			if (preced(tokst(top-1)) == preced(tok))
					{
					if (tok == OPDONE)
						{
						ptr = k	# normal return
						return(tokst(top))
						}
					else	# remove matching LPAREN
						{
						tok = tokst(top)
						kind = kindst(top)
						top = top -2
						}
					}
			else		# unbalanced parens
					return(0)
			}
		}
	# stack new tok, kind
	if (stackx(tok, kind) == ERR)
		return(0)
	}
return(0)
end

## exptok - get expression token for evaluation

integer function exptok(exp, k, tok, kind, radix)
implicit none
character exp(ARB), defn(MAXTOK), name(MAXTOK)
integer k	# index, updated unless EOS
integer tok	# return value, token found
integer kind	# return value, kind of token
integer radix	# default radix for numbers
integer ctonum, lookup
character type
character c, cn
integer index, length
external index
include "ctab.i"
string digits "0123456789abcdefABCDEF"
include "cexp.i"

c = type(exp(k))
if (radix > 10)
	{
	if (index(digits,exp(k)) > 0) c = DIGIT
	}
if (c == DIGIT)
	{
	tok = ctonum(exp, k, radix)
	kind = OPND
	return(YES)
	}
else if (c == LETTER)
	{	# found stored variable name
	call movnam(exp, k, name, 1)
	k = k + length(name)
	if (lookup (name, tok, idtab) == YES)
		{
		kind = OPND
		return(YES)
		}
	else
		return(NO)
	}
else		# c is symbol
	{
	cn = exp(k+1)
	kind = OP
	if(c == TILDE)
		{
		if (cn == EQUALS)
			{
			tok = OPNE
			k = k + 1
			}
		else tok = OPNOT
		}
	else if(c == CARET)
		{
		if (cn == EQUALS)
			{
			tok = OPNE
			k = k + 1
			}
		else tok = OPNOT
		}
	else if(c == BANG)
		{
		if (cn == EQUALS)
			{
			tok = OPNE
			k = k + 1
			}
		else tok = OPNOT
		}
	else if(c == LESS)
		{
		if (cn == EQUALS)
			{
			tok = OPLE
			k = k + 1
			}
		else tok = OPLT
		}
	else if(c == GREATER)
		{
		if (cn == EQUALS)
			{
			tok = OPGE
			k = k + 1
			}
		else tok = OPGT
		}
	else if(c == EQUALS)
		{
		if (cn == EQUALS)
			{
			tok = OPEQ
			k = k + 1
			}
		else tok = OPERR
		}
	else if(c == BAR)tok = OPOR
	else if(c == AMPER)tok  = OPAND
	else if(c == PLUS)tok = OPADD
	else if(c == MINUS)tok = OPSUB
	else if(c == STAR)
		{
		if (cn == STAR)
			{
			tok = OPEXP
			k = k + 1
			}
		else tok = OPMUL
		}
	else if(c == SLASH)tok = OPDIV
	else if(c == PERCENT)tok = OPMOD
	else if(c == LPAREN)
		{
		kind = SEP
		tok = OPLP
		}
	else if(c == RPAREN)
		{
		kind = SEP
		tok = OPRP
		}
	else if(c == EOS)
		{
		kind = SEP
		tok = OPDONE
		}
	else
		tok = OPERR

if (tok == OPERR)
	return(NO)
if (tok != OPDONE)
	k = k + 1
return(YES)
}
end

## movnam - move in(i) to out(j) until non-alphanumeric found

subroutine movnam (in, i, out, j)
implicit none
character in(ARB), out(ARB)
integer i, j, k1, k2
character type
character c

k1 = i
k2 = j
for(c=type(in(k1)); c == LETTER | c == DIGIT; c=type(in(k1)))
	{
	out(k2) = in(k1)
	k1 = k1 + 1
	k2 = k2 + 1
	}
out(k2) = EOS
return
end

## numtoc - convert integer int to char string in str

integer function numtoc(int, str, size, radix)
implicit none
integer mod
integer radix
integer d, i, int, intval, j, k, size
character str(ARB)
string digits "0123456789ABCDEF"

intval = abs(int)
str(1) = EOS
i = 1
repeat
	{	# generate digits
	i = i+1
	d = mod(intval,radix)
	str(i) = digits(d+1)
	intval = intval / radix
	} until (intval == 0 | i >= size)
if (int < 0 & i < size)
	{	# then sign
	i = i+1
	str(i) = MINUS
	}
numtoc = i - 1
for (j = 1; j < i; j = j+1)
	{	# reverse digits
	k = str(i)
	str(i) = str(j)
	str(j) = k
	i = i-1
	}
return
end

## stackx - put next expression on arith evaluation stack

integer function stackx(tok, kind)
implicit none
integer tok, kind
string errmsg "arith evaluation stack overflow"

include "cexp.i"

if (top >= MAXSTACK)
	{
	call putlin(errmsg, STDOUT)
	call putch(NEWLINE, STDOUT)
	return (ERR)
	}
top = top + 1
tokst(top) = tok
kindst(top) = kind
return(YES)
end

## strip - string blanks, tabs, and NEWLINES from line

subroutine strip (line)
implicit none
character line(ARB)
integer i

for (i=1; line(i) != EOS; )
	{
	if (line(i) == BLANK | line(i) == TAB | line(i) == NEWLINE)
		call scopy(line, i+1, line, i)
	else
		i = i + 1
	}
return
end

# chtoi - convert string at in(i) to integer, increment i

integer function chtoi(in, i)
implicit none
character in (ARB)
integer i

integer d
integer index
external index

# string digits "0123456789"
character digits(11)
data digits (1) /DIG0/,
	digits (2) /DIG1/,
	digits (3) /DIG2/,
	digits (4) /DIG3/,
	digits (5) /DIG4/,
	digits (6) /DIG5/,
	digits (7) /DIG6/,
	digits (8) /DIG7/,
	digits (9) /DIG8/,
	digits (10) /DIG9/,
	digits (11) /EOS/

while (in (i) == BLANK | in (i) == TAB)
	i = i + 1
for (chtoi = 0; in (i) != EOS; i = i + 1) {
	d = index (digits, in (i))
	if (d == 0)		# non-digit
		break
	chtoi = 10 * chtoi + d - 1
	}
return
end

# dsinit --- initialize dynamic storage space to w words

subroutine dsinit (w)
implicit none
integer w

integer Mem(1)
common /cdsmem/Mem

integer t

if (w < 2 * DSOHEAD + 2)
	stop 'In dsinit: unreasonably small memory size'
# set up avail list:
t = DSAVAIL
Mem (t + DSSIZE) = 0
Mem (t + DSLINK) = DSAVAIL + DSOHEAD

# set up first block of space:
t = DSAVAIL + DSOHEAD
Mem (t + DSSIZE) = w - DSOHEAD - 1	  # -1 for MEMEND
Mem (t + DSLINK) = LAMBDA

# record end of memory:
Mem (DSMEMEND) = w

return
end

# enter --- place a symbol in the symbol table, updating if already present

subroutine enter (symbol, info, st)
implicit none
character symbol (ARB)
integer info (ARB)
integer st

integer Mem(1)
common /cdsmem/Mem

integer i, nodsiz, j
integer stlu, length

integer node, pred
integer dsget

nodsiz = Mem (st)

if (stlu (symbol, node, pred, st) == NO) {
	node = dsget (1 + nodsiz + length (symbol) + 1)
	Mem (node + STLINK) = LAMBDA
	Mem (pred + STLINK) = node
	i = 1
	j = node + STDATA + nodsiz
	while (symbol (i) != EOS) {
		Mem (j) = symbol (i)
		i = i + 1
		j = j + 1
		}
	Mem (j) = EOS
	}

for (i = 1; i <= nodsiz; i = i + 1) {
	j = node + STDATA + i - 1
	Mem (j) = info (i)
	}

return
end

# lookup --- find a symbol in the symbol table, return its data

integer function lookup (symbol, info, st)
implicit none
character symbol (ARB)
integer info (ARB)
integer st

integer Mem(1)
common /cdsmem/Mem

integer i, nodsiz, kluge
integer stlu

integer node, pred

if (stlu (symbol, node, pred, st) == NO) {
	lookup = NO
	return
	}

nodsiz = Mem (st)
for (i = 1; i <= nodsiz; i = i + 1) {
	kluge = node + STDATA - 1 + i
	info (i) = Mem (kluge)
	}
lookup = YES

return
end

# mktabl --- make a new (empty) symbol table

integer function mktabl (nodsiz)
implicit none
integer nodsiz

integer Mem(1)
common /cdsmem/Mem

integer st
integer dsget

integer i

st = dsget (STHTABSIZE + 1)	  # +1 for record of nodsiz
Mem (st) = nodsiz
mktabl = st
do i = 1, STHTABSIZE; {
	st = st + 1
	Mem (st) = LAMBDA				 # null link
	}

return
end

# stlu --- symbol table lookup primitive

integer function stlu (symbol, node, pred, st)
implicit none
character symbol (ARB)
integer node, pred, st

integer Mem(1)
common /cdsmem/Mem

integer hash, i, j, nodsiz
integer equal

nodsiz = Mem (st)

hash = 0
for (i = 1; symbol (i) != EOS; i = i + 1)
	hash = hash + symbol (i)
hash = mod (hash, STHTABSIZE) + 1

pred = st + hash
node = Mem (pred)
while (node != LAMBDA) {
	i = 1
	j = node + STDATA + nodsiz
	while (symbol (i) == Mem (j)) {
		if (symbol (i) == EOS)
			return (YES)
		i = i + 1
		j = j + 1
		}
	pred = node
	node = Mem (pred + STLINK)
	}

return (NO)
end

# dsget --- get pointer to block of at least w available words

integer function dsget (w)
implicit none
integer w

integer Mem(1)
common /cdsmem/Mem

integer p, q, l

integer n, k, junk

character c (10)

n = w + DSOHEAD
q = DSAVAIL

repeat {
	p = Mem (q + DSLINK)
	if (p == LAMBDA)
		stop 'In dsget: out of memory'
	if (Mem (p + DSSIZE) >= n)
		break
	q = p
	}

k = Mem (p + DSSIZE) - n
if (k >= DSCLOSE) {
	Mem (p + DSSIZE) = k
	l = p + k
	Mem (l + DSSIZE) = n
	}
else {
	Mem (q + DSLINK) = Mem (p + DSLINK)
	l = p
	}

return (l + DSOHEAD)
end

# strcmp - compare 2 strings; return -1 if <, 0 if =, +1 if >

integer function strcmp (str1, str2)
implicit none
character str1 (ARB), str2 (ARB)

integer i

for (i = 1; str1 (i) == str2 (i); i = i + 1)
	if (str1 (i) == EOS)
		return (0)
if (str1 (i) == EOS)
	strcmp = -1
else if (str2 (i) == EOS)
	strcmp = + 1
else if (str1 (i) < str2 (i))
	strcmp = -1
else
	strcmp = +1
return
end

# type - determine type of character

character function type (c)
implicit none

character c

if ((LETA <= c & c <= LETZ) | (BIGA <= c & c <= BIGZ))
	type = LETTER
else if (DIG0 <= c & c <= DIG9)
	type = DIGIT
else
	type = c
return
end

# scopy - copy string at from (i) to to (j)

subroutine scopy (from, i, to, j)
implicit none
character from (ARB), to (ARB)
integer i, j

integer k1, k2

k2 = j
for (k1 = i; from (k1) != EOS; k1 = k1 + 1) {
	to (k2) = from (k1)
	k2 = k2 + 1
	}
to (k2) = EOS
return
end

# index - find character  c  in string  str

integer function index (str, c)
implicit none
character str (ARB), c

for (index = 1; str (index) != EOS; index = index + 1)
	if (str (index) == c)
		return
index = 0
return
end

# length - compute length of string

integer function length (str)
implicit none
character str (ARB)

for (length = 0; str (length+1) != EOS; length = length + 1)
	;
return
end

# getlin - gets line from unit fd

integer function getlin(line, fd)
implicit none
character line(MAXLINE)
integer fd
integer i, lastc

read(fd,9050,end=10)(line(i),i=1,MAXCARD)
9050 format(bn,MAXCARD a1)
do i=1,MAXCARD{
	call ilbyte(line(i),line(i),0)
	if(line(i) != BLANK)
		lastc=i
	}
lastc = min(lastc+1,MAXCARD)
line(lastc) = NEWLINE
line(lastc+1) = EOS
getlin = lastc
return

10 getlin = EOF
return
end

# putch - puts character on unit fd

subroutine putch(c, fd)
implicit none
character c
integer fd
character buf(MAXLINE)
integer i,lastc
data lastc/0/

if(lastc >= MAXCARD | c == NEWLINE) {
	do i=1,lastc
		call isbyte(buf(i),buf(i),0)
	write(fd,9060)(buf(i),i=1,lastc)
	9060 format(MAXCARD a1)
	lastc=0
	}
if(c != NEWLINE){
	lastc = lastc+1
	buf(lastc) = c
	}
return
end

# putlin - puts line on unit fd

subroutine putlin(str, fd)
implicit none
character str(ARB)
integer fd
integer i

for(i = 1; str(i) != EOS; i = i + 1)
	call putch(str(i), fd)
return
end
